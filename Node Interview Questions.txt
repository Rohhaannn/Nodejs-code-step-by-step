Video 5:
  Q.  How to use filter function ?

===========================================================================================================

Video 6: Importing Modules
  Q.  What are global & non-global modules ?
  =>  Modules which are imported & use, those are Non-Global Module
      Modules which can be used without importing, those are our Global Modules

===========================================================================================================

Video 7: Creating A Basic Server
  Q.1  how can we send function as parameter ?

  Q.2  what are arrow functions ? 

  Q.3  what 'http' module do ?
  =>  http module handles the request & response of the server in node

  Q.4  what does "req" do?
  =>  when you submit a form or send a parameter through  url, to access those inside node

  Q.5  what does res do ?
  =>  when we have to send response to the client

===========================================================================================================

Video 8: About package.json
  Q. what is package.json files
  => it keeps detaila related to our project.
    which details ?
    => related to coding like project version, project name, git repo, comnds used, packages used

  Q.  How to make it ?

  Q.  How to install external package ?

  Q.  what is package-lock.json file
  =>  It keeps details of our packages  

  Q.  Node.js is single threaded or multithreaded ?
  =>  Node.js is single threaded. Completes one task then move to another.

===========================================================================================================

Video 9: small Challenge

Q.  How to install node modules ?
Q.  What happens if node modules folder is deleted ?
Q.  Correct way to push the data on git ? OR shall we push node modules on git ?
=>  No.

===========================================================================================================

Video 10 : Nodemon

Q. Nodejs is Async lang or sync language ?
=> Async language

Explaintion:
when we talk about threding then nodejs an single threaded language

when we talk about sync or Async then nodejs is an Async language

===========================================================================================================

Video 11 : Basic API & Postman app

Q.  What is 2oo which has been passed in writeHead ?
=>  the number 201 represents the HTTP status code that is being sent in the response header. 

HTTP status codes are three-digit codes that indicate the outcome of an HTTP request. They are grouped into five categories:

1xx Informational:
These codes indicate that the request is being processed and more information is needed before completion.
100 Continue: Client should proceed with request.
101 Switching Protocols: Server will switch protocols based on request header.
102 Processing: Server is still processing the request.
103 Early Hints: Server provides early hints about the final response.

2xx Success:
These codes indicate that the request was successful.
200 OK: The request was successfully completed.
201 Created: A new resource was successfully created.
202 Accepted: The request has been accepted for processing but not yet completed.
203 Non-Authoritative Information: The response information is from a secondary source.
204 No Content: The request was successful but there is no content to return.
205 Reset Content: The client should clear any previous request-specific data.
206 Partial Content: Only a portion of the resource was returned due to a range request.
207 Multi-Status: Multiple responses for multiple resources are provided.
208 Already Reported: The entity was already successfully reported.
226 IM Used: Server successfully negotiated a downgrade to the requested protocol.

3xx Redirection:
These codes indicate that the client needs to take further action to complete the request, usually by following a redirection.
300 Multiple Choices: Server can't distinguish between multiple possible resources.
301 Moved Permanently: The resource has been permanently moved to a new location.
302 Found: The resource was temporarily moved to a new location.
303 See Other: The response is available at another URI.
304 Not Modified: The requested resource hasn't changed since the last request.
307 Temporary Redirect: The resource should be retrieved from a new location, but future requests should go to the original location.
308 Permanent Redirect: Same as 301 but using the POST method.

4xx Client Error:
These codes indicate that the client sent an invalid request.
400 Bad Request: The request is invalid or cannot be understood.
401 Unauthorized: The request requires authentication.
402 Payment Required: Payment is required for the requested resource.
403 Forbidden: The client doesn't have access to the requested resource.
404 Not Found: The requested resource could not be found.
405 Method Not Allowed: The request method is not supported for the resource.
406 Not Acceptable: The requested resource format is not acceptable.
407 Proxy Authentication Required: Proxy authentication is required.
408 Request Timeout: The request timed out waiting for a response.
409 Conflict: The request conflicts with existing data.
410 Gone: The requested resource is no longer available.
411 Length Required: The request must include a Content-Length header.
412 Precondition Failed: A precondition set by the client failed.
413 Payload Too Large: The request payload is larger than allowed.
414 URI Too Long: The request URI is too long.
415 Unsupported Media Type: The media type of the request body is not supported.
416 Range Not Satisfiable: The requested range cannot be satisfied.
417 Expectation Failed: The expectation in the request header failed.
418 I'm a teapot: A humorous response to a coffee brewing request (RFC 2324).
421 Misdirected Request: Request sent to an incorrect server.
422 Unprocessable Entity: The request was well-formed but could not be processed.
423 Locked: The resource is locked.
424 Failed Dependency: A request is dependent on another request that failed.
425 Too Early: Server received request prematurely.
426 Upgrade Required: Client should upgrade to a newer version of the HTTP protocol.

===========================================================================================================

Video 13: display files from folder

Q.  Can we get files from another location ?
=>  No. whenever you run node inside a folder. that acts as a temp web server. whatever files present outside that folder(from which you are running your node) doesn't matter.

===========================================================================================================

Video 14: Asynchronous Programming

what is Buffer ?
A temporary memory location, wheneverwe run any file node require require a bit memory to perform its operations, which is called Buffer.

===========================================================================================================

Video 15: Asynchronous Programming Part 2 

What are the drawbacks of asynchronous programming ?

let a = 10;
let b = 0;

setTimeout(()=>{
  b = 20;
  // console.log(b)
}, 2000);

console.log("Addition: ",a+b)

actual value we should've get is 30 but will get output as 10. when we assign a = 10 & b = 0, that statement run first thats y we get answer as 10, but the setTimeout function runs after 2 seconds value of b gets updated but never gets considered in calculation 

===========================================================================================================

Video 16 Handle Asynchronous Data

what is Promise: Promise & aysnc-await is way of handling Async data in js. Lets talk about Promises

This is the standard way to handle drawbacks of Asynchronous Programming, we have to create a new Promise as shown in above code, then we put our setTimeout function inside that promise, and pass the data in "resolve()" which we want to update with a specific time limit. 

then below we have call that promise using ".then()" which takes a callback function & we assign & update our data in that "promiseName.then" function & print the final result.

===========================================================================================================

video 17 How Node js Works

//call stack

console.log('starting up');

//goes to node api stack
setTimeout(()=>{
  console.log('2 second log');
},2000);

//goes to node api stack
setTimeout(()=>{
  console.log('0 second log');
},0);

//call stack
console.log('finishing up');

/*

output of this program will be
starting up
finishing up
0 second log
2 second log

even our second timeout fun has 0 second of delay still its running after  2nd console.log. why ?

=> we know that nodejs has written in c, Cpp, & javaScript and bcz setTimeout() is inherited from cpp it will go to the Node API's queue not in Call Stack. And the functions get stored into node api's queue will going to run after main call stack. if the main call stack is empty means main() from the main call stack has finished till the time function stored in node api's will wait in callback queue

===========================================================================================================

Video 12: Make HTML package

what is the use of Path Module?
=> it helps access folder within project

what is the use of static method ?
=> It loads static pages or static content

can you directly apply css to the html files which is in the html folder ?
=> No. bcz our path comes through nodejs file that why it cannot get applied directly

===========================================================================================================
